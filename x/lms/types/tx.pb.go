// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/lms/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LeaveStatus int32

const (
	LeaveStatus_STATUS_UNDEFINED LeaveStatus = 0
	LeaveStatus_STATUS_ACCEPTED  LeaveStatus = 1
	LeaveStatus_STATUS_REJECTED  LeaveStatus = 2
)

var LeaveStatus_name = map[int32]string{
	0: "STATUS_UNDEFINED",
	1: "STATUS_ACCEPTED",
	2: "STATUS_REJECTED",
}

var LeaveStatus_value = map[string]int32{
	"STATUS_UNDEFINED": 0,
	"STATUS_ACCEPTED":  1,
	"STATUS_REJECTED":  2,
}

func (x LeaveStatus) String() string {
	return proto.EnumName(LeaveStatus_name, int32(x))
}

func (LeaveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{0}
}

type MsgRegisterAdminRequest struct {
	// address is the account address of the admin.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// name is the admin name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgRegisterAdminRequest) Reset()         { *m = MsgRegisterAdminRequest{} }
func (m *MsgRegisterAdminRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdminRequest) ProtoMessage()    {}
func (*MsgRegisterAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{0}
}
func (m *MsgRegisterAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdminRequest.Merge(m, src)
}
func (m *MsgRegisterAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdminRequest proto.InternalMessageInfo

func (m *MsgRegisterAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRegisterAdminRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MsgRegisterAdminResponse struct {
}

func (m *MsgRegisterAdminResponse) Reset()         { *m = MsgRegisterAdminResponse{} }
func (m *MsgRegisterAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdminResponse) ProtoMessage()    {}
func (*MsgRegisterAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{1}
}
func (m *MsgRegisterAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdminResponse.Merge(m, src)
}
func (m *MsgRegisterAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdminResponse proto.InternalMessageInfo

type MsgAddStudentRequest struct {
	// admin is the account address of the admin
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// students is the list of Student.
	Students []*Student `protobuf:"bytes,2,rep,name=students,proto3" json:"students,omitempty"`
}

func (m *MsgAddStudentRequest) Reset()         { *m = MsgAddStudentRequest{} }
func (m *MsgAddStudentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddStudentRequest) ProtoMessage()    {}
func (*MsgAddStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{2}
}
func (m *MsgAddStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStudentRequest.Merge(m, src)
}
func (m *MsgAddStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStudentRequest proto.InternalMessageInfo

func (m *MsgAddStudentRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgAddStudentRequest) GetStudents() []*Student {
	if m != nil {
		return m.Students
	}
	return nil
}

type MsgAddStudentResponse struct {
}

func (m *MsgAddStudentResponse) Reset()         { *m = MsgAddStudentResponse{} }
func (m *MsgAddStudentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddStudentResponse) ProtoMessage()    {}
func (*MsgAddStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{3}
}
func (m *MsgAddStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStudentResponse.Merge(m, src)
}
func (m *MsgAddStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStudentResponse proto.InternalMessageInfo

type MsgApplyLeaveRequest struct {
	Address string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Reason  string     `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	From    *time.Time `protobuf:"bytes,3,opt,name=from,proto3,stdtime" json:"from,omitempty"`
	To      *time.Time `protobuf:"bytes,4,opt,name=to,proto3,stdtime" json:"to,omitempty"`
}

func (m *MsgApplyLeaveRequest) Reset()         { *m = MsgApplyLeaveRequest{} }
func (m *MsgApplyLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*MsgApplyLeaveRequest) ProtoMessage()    {}
func (*MsgApplyLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{4}
}
func (m *MsgApplyLeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyLeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyLeaveRequest.Merge(m, src)
}
func (m *MsgApplyLeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyLeaveRequest proto.InternalMessageInfo

func (m *MsgApplyLeaveRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgApplyLeaveRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgApplyLeaveRequest) GetFrom() *time.Time {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MsgApplyLeaveRequest) GetTo() *time.Time {
	if m != nil {
		return m.To
	}
	return nil
}

type MsgApplyLeaveResponse struct {
}

func (m *MsgApplyLeaveResponse) Reset()         { *m = MsgApplyLeaveResponse{} }
func (m *MsgApplyLeaveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApplyLeaveResponse) ProtoMessage()    {}
func (*MsgApplyLeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{5}
}
func (m *MsgApplyLeaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyLeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyLeaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyLeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyLeaveResponse.Merge(m, src)
}
func (m *MsgApplyLeaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyLeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyLeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyLeaveResponse proto.InternalMessageInfo

type MsgAcceptLeaveRequest struct {
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// using it as student id, will accept his latest leave request if any
	Student string      `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	Status  LeaveStatus `protobuf:"varint,3,opt,name=status,proto3,enum=lms.v1beta1.LeaveStatus" json:"status,omitempty"`
}

func (m *MsgAcceptLeaveRequest) Reset()         { *m = MsgAcceptLeaveRequest{} }
func (m *MsgAcceptLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptLeaveRequest) ProtoMessage()    {}
func (*MsgAcceptLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{6}
}
func (m *MsgAcceptLeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptLeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptLeaveRequest.Merge(m, src)
}
func (m *MsgAcceptLeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptLeaveRequest proto.InternalMessageInfo

func (m *MsgAcceptLeaveRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgAcceptLeaveRequest) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *MsgAcceptLeaveRequest) GetStatus() LeaveStatus {
	if m != nil {
		return m.Status
	}
	return LeaveStatus_STATUS_UNDEFINED
}

type MsgAcceptLeaveResponse struct {
}

func (m *MsgAcceptLeaveResponse) Reset()         { *m = MsgAcceptLeaveResponse{} }
func (m *MsgAcceptLeaveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptLeaveResponse) ProtoMessage()    {}
func (*MsgAcceptLeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{7}
}
func (m *MsgAcceptLeaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptLeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptLeaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptLeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptLeaveResponse.Merge(m, src)
}
func (m *MsgAcceptLeaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptLeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptLeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptLeaveResponse proto.InternalMessageInfo

type Student struct {
	// address is the account address of the student.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// name is the student name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// id is a unique student id.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4daf190d8b60f1, []int{8}
}
func (m *Student) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Student.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return m.Size()
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("lms.v1beta1.LeaveStatus", LeaveStatus_name, LeaveStatus_value)
	proto.RegisterType((*MsgRegisterAdminRequest)(nil), "lms.v1beta1.MsgRegisterAdminRequest")
	proto.RegisterType((*MsgRegisterAdminResponse)(nil), "lms.v1beta1.MsgRegisterAdminResponse")
	proto.RegisterType((*MsgAddStudentRequest)(nil), "lms.v1beta1.MsgAddStudentRequest")
	proto.RegisterType((*MsgAddStudentResponse)(nil), "lms.v1beta1.MsgAddStudentResponse")
	proto.RegisterType((*MsgApplyLeaveRequest)(nil), "lms.v1beta1.MsgApplyLeaveRequest")
	proto.RegisterType((*MsgApplyLeaveResponse)(nil), "lms.v1beta1.MsgApplyLeaveResponse")
	proto.RegisterType((*MsgAcceptLeaveRequest)(nil), "lms.v1beta1.MsgAcceptLeaveRequest")
	proto.RegisterType((*MsgAcceptLeaveResponse)(nil), "lms.v1beta1.MsgAcceptLeaveResponse")
	proto.RegisterType((*Student)(nil), "lms.v1beta1.Student")
}

func init() { proto.RegisterFile("cosmos/lms/v1beta1/tx.proto", fileDescriptor_db4daf190d8b60f1) }

var fileDescriptor_db4daf190d8b60f1 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x4d, 0xb2, 0xd2, 0x6e, 0x5f, 0x45, 0xa9, 0x4c, 0xd9, 0xac, 0x20, 0xa5, 0x25, 0x30, 0xa9,
	0xe2, 0x90, 0x6c, 0x85, 0x03, 0xd7, 0xae, 0x0d, 0x13, 0x88, 0x4e, 0x28, 0xed, 0x24, 0x04, 0x12,
	0x28, 0x6d, 0xbc, 0xa8, 0x52, 0x53, 0x87, 0xda, 0x9d, 0xd6, 0x7f, 0xb1, 0x9f, 0xc3, 0x4f, 0xd8,
	0x71, 0x47, 0x4e, 0x80, 0xda, 0x5f, 0xc1, 0x0d, 0xd5, 0x71, 0xa6, 0x36, 0x29, 0x9b, 0x76, 0xb3,
	0x3f, 0xbf, 0xef, 0x7d, 0x7e, 0x2f, 0xcf, 0x81, 0xa7, 0x03, 0xca, 0x42, 0xca, 0xec, 0x51, 0xc8,
	0xec, 0xf3, 0xc3, 0x3e, 0xe1, 0xde, 0xa1, 0xcd, 0x2f, 0xac, 0x68, 0x42, 0x39, 0x45, 0xc5, 0x51,
	0xc8, 0x2c, 0x59, 0xd5, 0xab, 0x01, 0xa5, 0xc1, 0x88, 0xd8, 0xe2, 0xa8, 0x3f, 0x3d, 0xb3, 0xf9,
	0x30, 0x24, 0x8c, 0x7b, 0x61, 0x14, 0xa3, 0xf5, 0x4a, 0x40, 0x03, 0x2a, 0x96, 0xf6, 0x72, 0x15,
	0x57, 0xcd, 0x63, 0xd8, 0xeb, 0xb0, 0xc0, 0x25, 0xc1, 0x90, 0x71, 0x32, 0x69, 0xfa, 0xe1, 0x70,
	0xec, 0x92, 0xef, 0x53, 0xc2, 0x38, 0xc2, 0x50, 0xf0, 0x7c, 0x7f, 0x42, 0x18, 0xc3, 0x6a, 0x4d,
	0xad, 0xef, 0xb8, 0xc9, 0x16, 0x21, 0xc8, 0x8d, 0xbd, 0x90, 0x60, 0x4d, 0x94, 0xc5, 0xda, 0xd4,
	0x01, 0x67, 0x89, 0x58, 0x44, 0xc7, 0x8c, 0x98, 0x5f, 0xa1, 0xd2, 0x61, 0x41, 0xd3, 0xf7, 0xbb,
	0x7c, 0xea, 0x93, 0x31, 0x4f, 0x26, 0x54, 0xe0, 0x81, 0xb7, 0x04, 0x4a, 0xfe, 0x78, 0x83, 0x0e,
	0x60, 0x9b, 0xc5, 0x38, 0x86, 0xb5, 0xda, 0x56, 0xbd, 0xd8, 0xa8, 0x58, 0x2b, 0x4a, 0xad, 0x84,
	0xe4, 0x06, 0x65, 0xee, 0xc1, 0x93, 0x14, 0xbf, 0x1c, 0xfc, 0x43, 0x8d, 0x27, 0x47, 0xd1, 0x68,
	0xf6, 0x81, 0x78, 0xe7, 0xe4, 0x6e, 0x6d, 0xbb, 0x90, 0x9f, 0x10, 0x8f, 0xd1, 0xb1, 0x54, 0x27,
	0x77, 0xe8, 0x0d, 0xe4, 0xce, 0x26, 0x34, 0xc4, 0x5b, 0x35, 0xb5, 0x5e, 0x6c, 0xe8, 0x56, 0x6c,
	0xb7, 0x95, 0xd8, 0x6d, 0xf5, 0x12, 0xbb, 0x8f, 0xb6, 0xaf, 0x7e, 0x55, 0xd5, 0xcb, 0xdf, 0x55,
	0xd5, 0x15, 0x1d, 0xe8, 0x35, 0x68, 0x9c, 0xe2, 0xdc, 0x3d, 0xfa, 0x34, 0x4e, 0x13, 0x4d, 0x2b,
	0x37, 0x97, 0x9a, 0x66, 0xf1, 0xc1, 0x60, 0x40, 0x22, 0xbe, 0xa6, 0x69, 0xb3, 0x9b, 0x18, 0x0a,
	0xd2, 0x27, 0x29, 0x28, 0xd9, 0xa2, 0x03, 0xc8, 0x33, 0xee, 0xf1, 0x29, 0x13, 0x9a, 0x4a, 0x0d,
	0xbc, 0xe6, 0xb2, 0xa0, 0xee, 0x8a, 0x73, 0x57, 0xe2, 0x4c, 0x0c, 0xbb, 0xe9, 0xd1, 0xf2, 0x52,
	0xc7, 0x50, 0x90, 0xde, 0xdf, 0x2f, 0x36, 0xa8, 0x04, 0xda, 0xd0, 0x17, 0x17, 0xd8, 0x71, 0xb5,
	0xa1, 0xff, 0xb2, 0x03, 0xc5, 0x95, 0xc9, 0xa8, 0x02, 0xe5, 0x6e, 0xaf, 0xd9, 0x3b, 0xed, 0x7e,
	0x3b, 0x3d, 0x69, 0x3b, 0x6f, 0xdf, 0x9d, 0x38, 0xed, 0xb2, 0x82, 0x1e, 0xc3, 0x23, 0x59, 0x6d,
	0xb6, 0x5a, 0xce, 0xc7, 0x9e, 0xd3, 0x2e, 0xab, 0x2b, 0x45, 0xd7, 0x79, 0xef, 0xb4, 0x96, 0x45,
	0xad, 0xf1, 0x57, 0x83, 0xad, 0x0e, 0x0b, 0x90, 0x07, 0xe5, 0x74, 0x3a, 0xd1, 0x8b, 0x35, 0xbd,
	0xff, 0x79, 0x05, 0xfa, 0xfe, 0x1d, 0x28, 0x69, 0x80, 0x82, 0x3e, 0xc1, 0xc3, 0xb5, 0x10, 0xa2,
	0x67, 0xe9, 0xce, 0xcc, 0x03, 0xd0, 0xcd, 0xdb, 0x20, 0x69, 0xe6, 0x9b, 0x28, 0x6c, 0x60, 0x4e,
	0x07, 0x7c, 0x03, 0x73, 0x36, 0x49, 0x0a, 0xfa, 0x02, 0xa5, 0xf5, 0x0f, 0x8a, 0xb2, 0x7d, 0x99,
	0xa0, 0xe9, 0xcf, 0x6f, 0xc5, 0x24, 0xe4, 0x47, 0xfb, 0x57, 0x73, 0x43, 0xbd, 0x9e, 0x1b, 0xea,
	0x9f, 0xb9, 0xa1, 0x5e, 0x2e, 0x0c, 0xe5, 0x7a, 0x61, 0x28, 0x3f, 0x17, 0x86, 0xf2, 0xb9, 0x78,
	0x21, 0x7e, 0x68, 0x7c, 0x16, 0x11, 0xd6, 0xcf, 0x8b, 0xa7, 0xf0, 0xea, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc9, 0xf6, 0x99, 0x9a, 0xeb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAdmin adds a new admin
	MsgRegisterAdmin(ctx context.Context, in *MsgRegisterAdminRequest, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error)
	// AddStudent adds new student
	MsgAddStudent(ctx context.Context, in *MsgAddStudentRequest, opts ...grpc.CallOption) (*MsgAddStudentResponse, error)
	// ApplyLeave request a new leave
	MsgApplyLeave(ctx context.Context, in *MsgApplyLeaveRequest, opts ...grpc.CallOption) (*MsgApplyLeaveResponse, error)
	// AcceptLeave accept or reject a leave
	MsgAcceptLeave(ctx context.Context, in *MsgAcceptLeaveRequest, opts ...grpc.CallOption) (*MsgAcceptLeaveResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MsgRegisterAdmin(ctx context.Context, in *MsgRegisterAdminRequest, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error) {
	out := new(MsgRegisterAdminResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Msg/MsgRegisterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgAddStudent(ctx context.Context, in *MsgAddStudentRequest, opts ...grpc.CallOption) (*MsgAddStudentResponse, error) {
	out := new(MsgAddStudentResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Msg/MsgAddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgApplyLeave(ctx context.Context, in *MsgApplyLeaveRequest, opts ...grpc.CallOption) (*MsgApplyLeaveResponse, error) {
	out := new(MsgApplyLeaveResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Msg/MsgApplyLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgAcceptLeave(ctx context.Context, in *MsgAcceptLeaveRequest, opts ...grpc.CallOption) (*MsgAcceptLeaveResponse, error) {
	out := new(MsgAcceptLeaveResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Msg/MsgAcceptLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAdmin adds a new admin
	MsgRegisterAdmin(context.Context, *MsgRegisterAdminRequest) (*MsgRegisterAdminResponse, error)
	// AddStudent adds new student
	MsgAddStudent(context.Context, *MsgAddStudentRequest) (*MsgAddStudentResponse, error)
	// ApplyLeave request a new leave
	MsgApplyLeave(context.Context, *MsgApplyLeaveRequest) (*MsgApplyLeaveResponse, error)
	// AcceptLeave accept or reject a leave
	MsgAcceptLeave(context.Context, *MsgAcceptLeaveRequest) (*MsgAcceptLeaveResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MsgRegisterAdmin(ctx context.Context, req *MsgRegisterAdminRequest) (*MsgRegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgRegisterAdmin not implemented")
}
func (*UnimplementedMsgServer) MsgAddStudent(ctx context.Context, req *MsgAddStudentRequest) (*MsgAddStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAddStudent not implemented")
}
func (*UnimplementedMsgServer) MsgApplyLeave(ctx context.Context, req *MsgApplyLeaveRequest) (*MsgApplyLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgApplyLeave not implemented")
}
func (*UnimplementedMsgServer) MsgAcceptLeave(ctx context.Context, req *MsgAcceptLeaveRequest) (*MsgAcceptLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAcceptLeave not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MsgRegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgRegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Msg/MsgRegisterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgRegisterAdmin(ctx, req.(*MsgRegisterAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgAddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgAddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Msg/MsgAddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgAddStudent(ctx, req.(*MsgAddStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgApplyLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApplyLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgApplyLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Msg/MsgApplyLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgApplyLeave(ctx, req.(*MsgApplyLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgAcceptLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgAcceptLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Msg/MsgAcceptLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgAcceptLeave(ctx, req.(*MsgAcceptLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lms.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgRegisterAdmin",
			Handler:    _Msg_MsgRegisterAdmin_Handler,
		},
		{
			MethodName: "MsgAddStudent",
			Handler:    _Msg_MsgAddStudent_Handler,
		},
		{
			MethodName: "MsgApplyLeave",
			Handler:    _Msg_MsgApplyLeave_Handler,
		},
		{
			MethodName: "MsgAcceptLeave",
			Handler:    _Msg_MsgAcceptLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/lms/v1beta1/tx.proto",
}

func (m *MsgRegisterAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Students) > 0 {
		for iNdEx := len(m.Students) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Students[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApplyLeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyLeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyLeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.To, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.To):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTx(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.From != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.From, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.From):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApplyLeaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyLeaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyLeaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptLeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptLeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptLeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptLeaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptLeaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptLeaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Student) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Student) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Student) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApplyLeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.From != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.From)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.To != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.To)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApplyLeaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptLeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgAcceptLeaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Student) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, &Student{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyLeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyLeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyLeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyLeaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyLeaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyLeaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptLeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptLeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptLeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LeaveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptLeaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptLeaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptLeaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Student) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
